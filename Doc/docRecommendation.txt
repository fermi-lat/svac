		    Documentation recommendations

The SVAC codes are only required to run on the SLAC linux machine and SLAC
batch.  Code should be stored in the CVS repository. For SVAC codes only, it
should be stored in the following directory tree: 

PackageName 
	  Src Exe Doc Output

The src dir should store all the header and source files, the Exe dir should
store (for C/C++ codes) a Make file so that when user types make in this dir,
it should build a exe in the directory. The Doc should store the document
files, they should include not only Doxygen configuration file but also all
the files generated by Doxygen. Output dir should be empty in CVS, it should
be a place to hold output of the package when user runs the code.

We will use Doxygen to produce documents for the codes.  Doxygen can process
C/C++ codes directly. For python code, it has to run through a filter first,

http://i31www.ira.uka.de/~baas/pydoxy/ 

We will adopt similar documentation recommendations as the SAS group:
 http://www-glast.slac.stanford.edu/software/core/documentation/doc/codeRecommendations.pdf

A summary is reproduced as below:

 - Maintain a mainpage.h file in the package's src directory. This file
   contains a general description of the package and is used as the index page
   for Doxygen output.  For Python, this should be mainpage.py, and should
   contain a single triple-quoted string with doxygen markup.

 - Each mainpage.h file will contain a section called "jobOptions". This
   section will list all input parameters defined in the package. It should
   also contains instructions on how to use the package.

 - All class declarations must be preceded by a Doxygen style comment block
   describing the class.  For Python, this should go in the class' doc string,
   rather than in comments preceding the class body.
 
 - Doxygen style comments immediately precede class, method, and member
   declarations.  For Python classes and methods, doxygen documentation should
   be in the class or function doc string.

 - Doxygen style comments normally reside within the header file before
   declarations. When there is no header file, Doxygen comments reside with
   the declarations within the implementation file.

 - Implementation files contain standard C++ comments, where the form '//' is
   preferred over '/* .. */'. Each important member function should contain a
   standard comment block of the form: 

	  // Purpose and Method: [include the physics if appropriate] 
	  // Inputs 
	  // Outputs  
	  // Dependencies: 
	  // Restrictions and Caveats: e.g. "This doesn't work off-axis" 

   Sections that are not pertinent to the method may be omitted. If the method
   in question is merely an interface to another routine, this should be noted
   in the Purpose and Method section.  For Python, this information should be
   included in the function's doc string, using doxygen markup.

 - Do not bother to document obvious members or methods such as default
   constructors, get and set routines - unless there is something special
   going on that deserves documentation. 

 - Use white space to set off comment blocks, rather than divider lines.

 - Maintain a release.notes text file in the package's doc directory noting
   major revisions and tags. The package should be retagged whenever there are
   major changes to the codes. We recommend to use following convention for
   the tagging. For example, v1r0p3 stands for version 1 reversion 0 patch 3.
   Version change stands for major changes in the codes while patch change
   stands for bug fix.

 - When checking in code to the CVS repository, provide modification details
   within the log message. The log messages are automatically stored within a
   ChangeLog file and will be used as the modification history.

 - If images are inserted into the Doxygen comments, the image files should be
   stored within the package's doc/images directory.

 - Make sure indentation is consistent in all source and header files. Spaces,
   rather than tabs should be inserted. Note that automatic formating may not
   behave as expected, developers are expected to double check the final form
   of their code to be sure it adheres to the standard.

 - Lines should be restricted to 80 characters per line in general, and no
   more 132 characters for long literal strings.

 - Keep comments up-to-date when modifying code.
