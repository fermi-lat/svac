
Command-line tools to operate the pipeline are located in $PDB_HOME, the
canonical value for the production pipeline is
/afs/slac.stanford.edu/u/gl/glastdpf/pdb.  This environment variable must be
set in order to use these tools.  The proper value (as well as a couple othe
necessary ones) can be set by sourcing ~glast/pdb_config/dpf_config_prod.csh
("prod" can be replaced by "test" or "dev", there are also versions for sh).

There are 4 main scripts: createRun.pl, deleteRun.pl, failStalledRun.pl, and
rollBackFailedRun.pl.  All have the same arguments: <script> task run.

rollBackFailedRun.pl retries the last process in a run that failed.  This is
what you want to do if there was a failure due to a transient problem with
LSF, Oracle, NFS, or ... whatever.  It's also useful if there is a problem in
a system that is outside CCB control (like the calibration database), so that
it can be fixed without making a new version of the SVAC tasks.

createRun.pl creates a run.  You can't use it to create a run of a task if the
task already has a run with that ID.  If you want to fix something reulting
from a transient error or something external to the SVAC tasks that DIDN'T
cause a failure, you will have to use deleteRun.pl first to get the run out of
GINO's database, then use createRun.pl.  Inform the CCB (Richard) if you have
to do this.

failStalledRun.pl can be used to fail a run that is stuck in prepared,
finalizing, or some other state.  The run can then be rolled back.

Reprocessing ... is a bit complicated.  There's not THAT much to it - make
symlinks to the appropriate input files, with the appropriate names, and do a
createRun.  The tricky part is figuring out what "appropriate" is.  There are
several csh scripts in the recon and eLogUpdate directories to reprocess runs
that were originally done with specific versions of the online task, which
have the online version in their name somewhere.  There is also one,
reprocess.csh, which works on runs that were originally processed by the
current version of online's task (if the online task version has been
correctly updated in beamtestPlRoot.cshrc - probably a good idea to check first).
If you need one for an online version that doesn't have one already, you could
try to figure it out by looking at the ones that are there.
