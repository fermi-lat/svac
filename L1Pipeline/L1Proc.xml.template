<?xml version="1.0" encoding="UTF-8"?>
<pipeline
   xmlns="http://glast-ground.slac.stanford.edu/pipeline"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://glast-ground.slac.stanford.edu/pipeline http://glast-ground.slac.stanford.edu/Pipeline-II/schemas/2.0/pipeline.xsd">

<task name="L1Proc" version="%(L1Version)s" type="Data">

   <process name="findRunDirs">
      <variables>
         <var name="L1ProcROOT">%(L1ProcROOT)s</var>
         <var name="DOWNLINK_ID">0</var>
         <var name="DOWNLINK_RAWDIR">/nfs/farm/g/glast/u33/wai/pipeline_tests/dldir</var>
      </variables>
      <job batchOptions=" -q short" executable="${L1ProcROOT}/findRunDirs.py"/>
   </process>

   <process name="launchRuns">
      <variables>
         <var name="runList">RUNID=run001,RUN_RAWDIR=/nfs/farm/g/glast/u33/wai/pipeline_tests/dldir/run001,DOWNLINK_ID=0</var>
      </variables>
      <script>
         <![CDATA[
         argList = runList.split('*')
         for iStream in range(len(argList)):
            pipeline.createSubstream("doRun",iStream,argList[iStream])
            continue
         ]]>
      </script>
      <depends>
         <after process="findRunDirs" status="SUCCESS"/>
      </depends>
      <createsSubtasks>
         <subtask>doRun</subtask>
      </createsSubtasks>
   </process>

   <task name="doRun" version="%(L1Version)s" type="Data">

      <prerequisites>
          <prerequisite name="DOWNLINK_ID" type="string"/>
          <prerequisite name="RUNID" type="string"/>
          <prerequisite name="RUN_RAWDIR" type="string"/>
      </prerequisites>

      <process name="findChunks">
         <variables>
            <var name="L1ProcROOT">%(L1ProcROOT)s</var>
         </variables>
         <job batchOptions=" -q short" executable="${L1ProcROOT}/findChunks.py"/>
      </process>

      <process name="launchChunks">
         <variables>
            <var name="chunkList">CHUNK_ID=001,EVTFILE=${RUN_RAWDIR}/chunk_001.evt,GLAST_EXT=/afs/slac/g/glast/ground/GLAST_EXT/rh9_gcc32opt,LATCalibRoot=/afs/slac/g/glast/ground/releases/calibrations*CHUNK_ID=002,EVTFILE=${RUN_RAWDIR}/chunk_002.evt,GLAST_EXT=/afs/slac/g/glast/ground/GLAST_EXT/rh9_gcc32opt,LATCalibRoot=/afs/slac/g/glast/ground/releases/calibrations</var>
         </variables>
         <script>
            <![CDATA[
            argList = chunkList.split('*')
            for iStream in range(len(argList)):
               pipeline.createSubstream("doChunk",iStream,argList[iStream])
               continue
            ]]>
         </script>
         <depends>
            <after process="findChunks" status="SUCCESS"/>
         </depends>
         <createsSubtasks>
            <subtask>doChunk</subtask>
         </createsSubtasks>
      </process>
 
      <process name="mergeDigiMon">
         <variables>
            <var name="L1ProcROOT">%(L1ProcROOT)s</var>
         </variables>
         <job batchOptions=" -q short" executable="${L1ProcROOT}/mergeHistos.py"/>
         <depends>
            <after process="doChunk.digiMon" status="SUCCESS" />
         </depends>
      </process>

      <process name="registerDigiMon">
         <variables>
            <var name="MergedFilename">merged_digi_hist.root</var>
            <var name="RUN_ROOTDIR">/nfs/farm/g/glast/u33/wai/pipeline_tests/L1</var>
         </variables>
         <script><![CDATA[
            dataType = "MC"
            logicalPath = "/L1Proc/DigiMon/" + MergedFilename
            filePath = RUN_ROOTDIR + "/" + MergedFilename
            attributes = "tstart=0:tstop=120"
            datacatalog.registerDataset(dataType,logicalPath,filePath,attributes)
            ]]>
         </script>
         <depends>
            <after process="mergeDigiMon" status="SUCCESS" />
         </depends>
      </process>

      <task name="doChunk" version="%(L1Version)s" type="Data">

         <prerequisites>
             <prerequisite name="CHUNK_ID" type="string"/>
             <prerequisite name="EVTFILE" type="string"/>
             <prerequisite name="GLAST_EXT" type="string"/>
             <prerequisite name="LATCalibRoot" type="string"/>
         </prerequisites>

         <process name="digitization">
            <variables>
               <var name="L1ProcROOT">%(L1ProcROOT)s</var>
            </variables>
            <job batchOptions=" -q short" executable="${L1ProcROOT}/digitize.py"/>
         </process>
 
         <process name="digiMon">
            <variables>
               <var name="L1ProcROOT">%(L1ProcROOT)s</var>
               <var name="reportType">digi</var>
            </variables>
            <job batchOptions=" -q medium" executable="${L1ProcROOT}/monitorDigi.py"/>
            <depends>
               <after process="digitization" status="SUCCESS" />
            </depends>
         </process>

         <process name="digiReport">
            <variables>
               <var name="L1ProcROOT">%(L1ProcROOT)s</var>
            </variables>
            <job batchOptions=" -q short" executable="${L1ProcROOT}/digiReport.py"/>
            <depends>
               <after process="digiMon" status="SUCCESS" />
            </depends>
         </process>

         <process name="setupCrumbs">
            <variables>
               <var name="L1ProcROOT">%(L1ProcROOT)s</var>
            </variables>
            <job batchOptions=" -q short" executable="${L1ProcROOT}/setupCrumbs.py"/>
            <depends>
               <after process="digitization" status="SUCCESS" />
            </depends>
         </process>

         <process name="launchCrumbs">
            <variables>
               <var name="crumbList">CRUMB_ID=0,crumbEvents=100,crumbStart=0</var>
            </variables>
            <script>
               <![CDATA[
               argList = crumbList.split('*')
               for iStream in range(len(argList)):
                  pipeline.createSubstream("doCrumb",iStream,argList[iStream])
                  continue
               ]]>
            </script>
            <depends>
               <after process="setupCrumbs" status="SUCCESS" />
            </depends>
            <createsSubtasks>
               <subtask>doCrumb</subtask>
            </createsSubtasks>
         </process>

         <task name="doCrumb" version="%(L1Version)s" type="Data">

            <prerequisites>
               <prerequisite name="CRUMB_ID" type="string"/>
               <prerequisite name="crumbEvents" type="string" />
               <prerequisite name="crumbStart" type="string" />
            </prerequisites>

            <process name="recon">
               <variables>
                  <var name="L1ProcROOT">%(L1ProcROOT)s</var>
               </variables>
               <job batchOptions=" -q short" executable="${L1ProcROOT}/recon.py" />
            </process>

         </task>
       
      </task>

   </task>

</task>
</pipeline>

