<?xml version="1.0" encoding="UTF-8"?>
<pipeline
   xmlns="http://glast-ground.slac.stanford.edu/pipeline"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://glast-ground.slac.stanford.edu/pipeline http://glast-ground.slac.stanford.edu/Pipeline-II/schemas/2.0/pipeline.xsd">


<task name="L1Proc" version="%(L1Version)s" type="Data">

   <variables>
      <var name="CMTCONFIG">%(cmtConfig)s</var>
      <var name="GLAST_EXT">%(glastExt)s</var>
      <var name="L1ProcROOT">%(L1ProcROOT)s</var>
      <var name="ROOTSYS">%(rootSys)s</var>
   </variables>

   <prerequisites>
      <prerequisite name="DOWNLINK_RAWDIR" type="string" />
      <prerequisite name="DOWNLINK_ID" type="string" />
   </prerequisites>

   <process name="findRunDirs">
      <job executable="${L1ProcROOT}/findRunDirs.py" batchOptions=" -q %(quickQueue)s "  allocationGroup="%(allocationGroup)s" />
      <createsSubtasks>
         <subtask>doRun</subtask>
      </createsSubtasks>
   </process>

   <task name="doRun" version="%(L1Version)s" type="Data">

      <prerequisites>
          <prerequisite name="DOWNLINK_ID" type="string"/>
          <prerequisite name="RUNID" type="string"/>
          <prerequisite name="RUN_RAWDIR" type="string"/>
      </prerequisites>

      <process name="findChunks">
         <job executable="${L1ProcROOT}/findChunks.py" batchOptions=" -q %(quickQueue)s "  allocationGroup="%(allocationGroup)s" />
         <createsSubtasks>
            <subtask>doChunk</subtask>
         </createsSubtasks>
      </process>

      <process name="mergeDigi">
         <variables>
            <var name="fileType">digi</var>
         </variables>
         <job executable="${L1ProcROOT}/mergeStuff.py" batchOptions=" -q %(standardQueue)s "  allocationGroup="%(allocationGroup)s" />
         <depends>
            <after process="doChunk.digitization" status="DONE"/>
         </depends>
      </process>

      <process name="registerDigi">
         <script><![CDATA[
            dataType = "MC"
            logicalPath = pipeline.getProcessInstance("mergeDigi").getVariable("REGISTER_LOGIPATH")
            filePath = pipeline.getProcessInstance("mergeDigi").getVariable("REGISTER_FILEPATH")
            attributes = "tstart=0:tstop=120"
            datacatalog.registerDataset(dataType,logicalPath,filePath,attributes)
            ]]>
         </script>
         <depends>
            <after process="mergeDigi" status="SUCCESS" />
         </depends>
      </process>
 
      <process name="mergeDigiMon">
         <variables>
            <var name="fileType">digiMon</var>
         </variables>
         <job executable="${L1ProcROOT}/mergeStuff.py" batchOptions=" -q %(standardQueue)s "  allocationGroup="%(allocationGroup)s" />
         <depends>
            <after process="doChunk.digiMon" status="DONE" />
         </depends>
      </process>

      <process name="registerDigiMon">
         <script><![CDATA[
            dataType = "MC"
            logicalPath = pipeline.getProcessInstance("mergeDigiMon").getVariable("REGISTER_LOGIPATH")
            filePath = pipeline.getProcessInstance("mergeDigiMon").getVariable("REGISTER_FILEPATH")
            attributes = "tstart=0:tstop=120"
            datacatalog.registerDataset(dataType,logicalPath,filePath,attributes)
            ]]>
         </script>
         <depends>
            <after process="mergeDigiMon" status="SUCCESS" />
         </depends>
      </process>

      <process name="mergeReconChunks">
         <variables>
            <var name="fileType">recon</var>
         </variables>
         <job executable="${L1ProcROOT}/mergeStuff.py" batchOptions=" -q %(standardQueue)s "  allocationGroup="%(allocationGroup)s" />
         <depends>
            <after process="doChunk.mergeReconCrumbs" status="DONE"/>
         </depends>
      </process>

      <process name="registerRecon">
         <script><![CDATA[
            dataType = "MC"
            logicalPath = pipeline.getProcessInstance("mergeReconChunks").getVariable("REGISTER_LOGIPATH")
            filePath = pipeline.getProcessInstance("mergeReconChunks").getVariable("REGISTER_FILEPATH")
            attributes = "tstart=0:tstop=120"
            datacatalog.registerDataset(dataType,logicalPath,filePath,attributes)
            ]]>
         </script>
         <depends>
            <after process="mergeReconChunks" status="SUCCESS" />
         </depends>
      </process>

      <process name="mergeCalChunks">
         <variables>
            <var name="fileType">cal</var>
         </variables>
         <job executable="${L1ProcROOT}/mergeStuff.py" batchOptions=" -q %(standardQueue)s "  allocationGroup="%(allocationGroup)s" />
         <depends>
            <after process="doChunk.mergeCalCrumbs" status="DONE"/>
         </depends>
      </process>

      <process name="registerCal">
         <script><![CDATA[
            dataType = "MC"
            logicalPath = pipeline.getProcessInstance("mergeCalChunks").getVariable("REGISTER_LOGIPATH")
            filePath = pipeline.getProcessInstance("mergeCalChunks").getVariable("REGISTER_FILEPATH")
            attributes = "tstart=0:tstop=120"
            datacatalog.registerDataset(dataType,logicalPath,filePath,attributes)
            ]]>
         </script>
         <depends>
            <after process="mergeCalChunks" status="SUCCESS" />
         </depends>
      </process>

      <process name="mergeMeritChunks">
         <variables>
            <var name="fileType">merit</var>
         </variables>
         <job executable="${L1ProcROOT}/mergeStuff.py" batchOptions=" -q %(standardQueue)s "  allocationGroup="%(allocationGroup)s" />
         <depends>
            <after process="doChunk.mergeMeritCrumbs" status="DONE"/>
         </depends>
      </process>

      <process name="makeFT1">
         <job executable="${L1ProcROOT}/makeFT1.py" batchOptions=" -q %(standardQueue)s "  allocationGroup="%(allocationGroup)s" />
         <depends>
            <after process="mergeMeritChunks" status="SUCCESS"/>
         </depends>
      </process>

      <process name="registerFT1">
         <script><![CDATA[
            dataType = "MC"
            logicalPath = pipeline.getProcessInstance("makeFT1").getVariable("REGISTER_LOGIPATH")
            filePath = pipeline.getProcessInstance("makeFT1").getVariable("REGISTER_FILEPATH")
            attributes = "tstart=0:tstop=120"
            datacatalog.registerDataset(dataType,logicalPath,filePath,attributes)
            ]]>
         </script>
         <depends>
            <after process="makeFT1" status="SUCCESS" />
         </depends>
      </process>

      <process name="registerMerit">
         <script><![CDATA[
            dataType = "MC"
            logicalPath = pipeline.getProcessInstance("mergeMeritChunks").getVariable("REGISTER_LOGIPATH")
            filePath = pipeline.getProcessInstance("mergeMeritChunks").getVariable("REGISTER_FILEPATH")
            attributes = "tstart=0:tstop=120"
            datacatalog.registerDataset(dataType,logicalPath,filePath,attributes)
            ]]>
         </script>
         <depends>
            <after process="mergeMeritChunks" status="SUCCESS" />
         </depends>
      </process>
 
      <process name="mergeReconMon">
         <variables>
            <var name="fileType">reconMon</var>
         </variables>
         <job executable="${L1ProcROOT}/mergeStuff.py" batchOptions=" -q %(standardQueue)s "  allocationGroup="%(allocationGroup)s" />
         <depends>
            <after process="doChunk.reconMon" status="DONE" />
         </depends>
      </process>

      <process name="registerReconMon">
         <script><![CDATA[
            dataType = "MC"
            logicalPath = pipeline.getProcessInstance("mergeReconMon").getVariable("REGISTER_LOGIPATH")
            filePath = pipeline.getProcessInstance("mergeReconMon").getVariable("REGISTER_FILEPATH")
            attributes = "tstart=0:tstop=120"
            datacatalog.registerDataset(dataType,logicalPath,filePath,attributes)
            ]]>
         </script>
         <depends>
            <after process="mergeReconMon" status="SUCCESS" />
         </depends>
      </process>

      <process name="mergeSvacTuple">
         <variables>
            <var name="fileType">svac</var>
         </variables>
         <job executable="${L1ProcROOT}/mergeStuff.py" batchOptions=" -q %(standardQueue)s "  allocationGroup="%(allocationGroup)s" />
         <depends>
            <after process="doChunk.svacTuple" status="DONE" />
         </depends>
      </process>

      <process name="registerSvacTuple">
         <script><![CDATA[
            dataType = "MC"
            logicalPath = pipeline.getProcessInstance("mergeSvacTuple").getVariable("REGISTER_LOGIPATH")
            filePath = pipeline.getProcessInstance("mergeSvacTuple").getVariable("REGISTER_FILEPATH")
            attributes = "tstart=0:tstop=120"
            datacatalog.registerDataset(dataType,logicalPath,filePath,attributes)
            ]]>
         </script>
         <depends>
            <after process="mergeSvacTuple" status="SUCCESS" />
         </depends>
      </process>

      <task name="doChunk" version="%(L1Version)s" type="Data">

         <prerequisites>
             <prerequisite name="CHUNK_ID" type="string"/>
             <prerequisite name="EVTFILE" type="string"/>
         </prerequisites>

         <process name="digitization">
            <job executable="${L1ProcROOT}/digitize.py" batchOptions=" -q %(standardQueue)s "  allocationGroup="%(allocationGroup)s" />
         </process>
 
         <process name="digiMon">
            <variables>
               <var name="reportType">digi</var>
            </variables>
            <job executable="${L1ProcROOT}/monitorDigi.py" batchOptions=" -q %(standardQueue)s "  allocationGroup="%(allocationGroup)s" />
            <depends>
               <after process="digitization" status="SUCCESS" />
            </depends>
         </process>

         <process name="digiReport">
            <job executable="${L1ProcROOT}/digiReport.py" batchOptions=" -q %(quickQueue)s "  allocationGroup="%(allocationGroup)s" />
            <depends>
               <after process="digiMon" status="SUCCESS" />
            </depends>
         </process>

         <process name="setupCrumbs">
            <variables>
               <var name="LD_LIBRARY_PATH">%(libraryPath)s</var>
               <var name="PYTHONPATH">%(pythonPath)s</var>
            </variables>
            <job executable="${L1ProcROOT}/setupCrumbs.py" batchOptions=" -q %(quickQueue)s "  allocationGroup="%(allocationGroup)s" />
            <depends>
               <after process="digitization" status="SUCCESS" />
            </depends>
            <createsSubtasks>
               <subtask>doCrumb</subtask>
            </createsSubtasks>
         </process>

         <process name="mergeCalCrumbs">
            <variables>
               <var name="fileType">cal</var>
            </variables>
            <job executable="${L1ProcROOT}/mergeStuff.py" batchOptions=" -q %(standardQueue)s "  allocationGroup="%(allocationGroup)s" />
            <depends>
               <after process="doCrumb.recon" status="DONE"/>
            </depends>
         </process>

         <process name="mergeMeritCrumbs">
            <variables>
               <var name="fileType">merit</var>
            </variables>
            <job executable="${L1ProcROOT}/mergeStuff.py" batchOptions=" -q %(standardQueue)s "  allocationGroup="%(allocationGroup)s" />
            <depends>
               <after process="doCrumb.recon" status="DONE"/>
            </depends>
         </process>

         <process name="mergeReconCrumbs">
            <variables>
               <var name="fileType">recon</var>
            </variables>
            <job executable="${L1ProcROOT}/mergeStuff.py" batchOptions=" -q %(standardQueue)s "  allocationGroup="%(allocationGroup)s" />
            <depends>
               <after process="doCrumb.recon" status="DONE"/>
            </depends>
         </process>

         <process name="reconMon">
            <variables>
               <var name="reportType">recon</var>
            </variables>
            <job executable="${L1ProcROOT}/monitorDigi.py" batchOptions=" -q %(standardQueue)s "  allocationGroup="%(allocationGroup)s" />
            <depends>
               <after process="mergeReconCrumbs" status="SUCCESS" />
            </depends>
         </process>

         <process name="svacTuple">
            <job executable="${L1ProcROOT}/makeSvac.py" batchOptions=" -q %(standardQueue)s "  allocationGroup="%(allocationGroup)s" />
            <depends>
               <after process="mergeReconCrumbs" status="SUCCESS" />
            </depends>
         </process>

         <process name="deleteReconCrumbs">
            <variables>
               <var name="fileType">recon</var>
            </variables>
            <job executable="${L1ProcROOT}/deleteStuff.py" batchOptions=" -q %(quickQueue)s "  allocationGroup="%(allocationGroup)s" />
            <depends>
               <after process="mergeReconCrumbs" status="SUCCESS"/>
               <after process="doCrumb.recon" status="SUCCESS"/>
            </depends>
         </process>

         <process name="deleteCalCrumbs">
            <variables>
               <var name="fileType">cal</var>
            </variables>
            <job executable="${L1ProcROOT}/deleteStuff.py" batchOptions=" -q %(quickQueue)s "  allocationGroup="%(allocationGroup)s" />
            <depends>
               <after process="mergeCalCrumbs" status="SUCCESS"/>
               <after process="doCrumb.recon" status="SUCCESS"/>
            </depends>
         </process>

         <process name="deleteMeritCrumbs">
            <variables>
               <var name="fileType">merit</var>
            </variables>
            <job executable="${L1ProcROOT}/deleteStuff.py" batchOptions=" -q %(quickQueue)s "  allocationGroup="%(allocationGroup)s" />
            <depends>
               <after process="mergeMeritCrumbs" status="SUCCESS"/>
               <after process="doCrumb.recon" status="SUCCESS"/>
            </depends>
         </process>

         <task name="doCrumb" version="%(L1Version)s" type="Data">

            <prerequisites>
               <prerequisite name="CRUMB_ID" type="string"/>
               <prerequisite name="crumbEvents" type="string" />
               <prerequisite name="crumbStart" type="string" />
            </prerequisites>

            <process name="recon">
               <job executable="${L1ProcROOT}/recon.py" batchOptions=" -q %(reconQueue)s "  allocationGroup="%(allocationGroup)s" />
            </process>

         </task>
       
      </task>

   </task>

</task>
</pipeline>

