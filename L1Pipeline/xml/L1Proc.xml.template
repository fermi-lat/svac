<?xml version="1.0" encoding="UTF-8"?>
<pipeline
  xmlns="http://glast-ground.slac.stanford.edu/pipeline"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://glast-ground.slac.stanford.edu/pipeline http://glast-ground.slac.stanford.edu/Pipeline-II/schemas/2.0/pipeline.xsd">

<task name="L1Proc" version="%(L1Version)s" type="Data">

  <variables>
    <var name="DATASOURCE">LPA</var>
    <var name="CMTCONFIG">%(cmtConfig)s</var>
    <var name="GLAST_EXT">%(glastExt)s</var>
    <var name="GPL2">%(GPL2)s</var>
    <var name="L1ProcROOT">%(L1ProcROOT)s</var>
    <var name="LATCalibRoot">%(LATCalibRoot)s</var>
    <var name="LD_LIBRARY_PATH">%(libraryPath)s</var>
    <var name="MALLOC_CHECK_">0</var>
    <var name="PFILES">%(PFILES)s</var>
    <var name="PYTHONPATH">%(pythonPath)s</var>
    <var name="ROOTSYS">%(rootSys)s</var>
    <var name="ST">%(ST)s</var>
  </variables>

  <prerequisites>
    <prerequisite name="DOWNLINK_RAWDIR" type="string"/>
    <prerequisite name="DOWNLINK_ID" type="string"/>
  </prerequisites>

  <process name="findRunDirs">
    <job executable="${L1ProcROOT}/findRunDirs.py" batchOptions=" -q express "/>
    <createsSubtasks>
      <subtask>doRun</subtask>
      <subtask>doLci</subtask>
      <subtask>cleanupIncompleteRun</subtask>
    </createsSubtasks>
  </process>

  <process name="ft2Gaps">
    <job executable="${L1ProcROOT}/ft2Db.py" batchOptions=" -q express "/>
  </process>

  <task name="doRun" version="%(L1Version)s" type="Data">

    <prerequisites>
      <prerequisite name="DOWNLINK_ID" type="string"/>
      <prerequisite name="RUNID" type="string"/>
      <prerequisite name="RUNSTATUS" type="string"/>
      <prerequisite name="RUN_RAWDIR" type="string"/>
      <prerequisite name="tStart" type="float"/>
      <prerequisite name="tStop" type="float"/>
   </prerequisites>

    <process name="findChunks">
      <job executable="${L1ProcROOT}/findChunks.py" batchOptions=" -q express -E ${L1ProcROOT}/lockFile.py "/>
      <createsSubtasks>
        <subtask>doChunk</subtask>
      </createsSubtasks>
    </process>

    <process name="mergeDigi">
      <variables>
        <var name="fileType">digi</var>
      </variables>
      <job executable="${L1ProcROOT}/mergeStuff.py" batchOptions=" -q medium -sp 100 "/>
      <depends>
        <after process="doChunk.digitization" status="DONE"/>
      </depends>
    </process>

    <process name="registerDigi">
      <variables>
        <var name="parentProcess">mergeDigi</var>
        <var name="dataType">DIGI</var>
      </variables>
      <script><![CDATA[
%(registerBody)s
]]>
      </script>
      <depends>
        <after process="mergeDigi" status="SUCCESS"/>
      </depends>
    </process>
 
    <process name="mergeDigiEor">
      <variables>
        <var name="fileType">digiEor</var>
      </variables>
      <job executable="${L1ProcROOT}/mergeStuff.py" batchOptions=" -q long "/>
      <depends>
        <after process="doChunk.digiEor" status="DONE"/>
      </depends>
    </process>
 
    <process name="registerDigiEor">
      <variables>
        <var name="parentProcess">mergeDigiEor</var>
        <var name="dataType">DIGIHIST</var>
      </variables>
      <script><![CDATA[
%(registerBody)s
]]>
      </script>
      <depends>
        <after process="mergeDigiEor" status="SUCCESS"/>
      </depends>
    </process>

    <process name="mergeDigiTrend">
      <variables>
        <var name="fileType">digiTrend</var>
      </variables>
      <job executable="${L1ProcROOT}/mergeStuff.py" batchOptions=" -q long "/>
      <depends>
        <after process="doChunk.digiTrend" status="DONE"/>
      </depends>
    </process>
 
    <process name="registerDigiTrend">
      <variables>
        <var name="parentProcess">mergeDigiTrend</var>
        <var name="dataType">DIGITREND</var>
      </variables>
      <script><![CDATA[
%(registerBody)s
]]>
      </script>
      <depends>
        <after process="mergeDigiTrend" status="SUCCESS"/>
      </depends>
    </process>

    <process name="ingestDigiTrend">
      <variables>
        <var name="reportType">digiTrend</var>
      </variables>
      <job executable="${L1ProcROOT}/ingestTrending.py" batchOptions=" -q long "/>
      <depends>
        <after process="mergeDigiTrend" status="SUCCESS"/>
      </depends>
    </process>
 
    <process name="mergeFastMonHist">
      <variables>
        <var name="fileType">fastMonHist</var>
      </variables>
      <job executable="${L1ProcROOT}/mergeStuff.py" batchOptions=" -q short "/>
      <depends>
        <after process="doChunk.fastMon" status="DONE"/>
      </depends>
    </process>

    <process name="registerFastMonHist">
      <variables>
        <var name="parentProcess">mergeFastMonHist</var>
        <var name="dataType">FASTMONHIST</var>
      </variables>
      <script><![CDATA[
%(registerBody)s
]]>
      </script>
      <depends>
        <after process="mergeFastMonHist" status="SUCCESS"/>
      </depends>
    </process>
 
    <process name="mergeFastMonTuple">
      <variables>
        <var name="fileType">fastMonTuple</var>
      </variables>
      <job executable="${L1ProcROOT}/mergeStuff.py" batchOptions=" -q medium "/>
      <depends>
        <after process="doChunk.fastMon" status="DONE"/>
      </depends>
    </process>

    <process name="registerFastMonTuple">
      <variables>
        <var name="parentProcess">mergeFastMonTuple</var>
        <var name="dataType">FASTMONTUPLE</var>
      </variables>
      <script><![CDATA[
%(registerBody)s
]]>
      </script>
      <depends>
        <after process="mergeFastMonTuple" status="SUCCESS"/>
      </depends>
    </process>
 
    <process name="fastMonAlarm">
      <variables>
        <var name="fileType">fastMonHist</var>
      </variables>
      <job executable="${L1ProcROOT}/alarmHandler.py" batchOptions=" -q express "/>
      <depends>
        <after process="mergeFastMonHist" status="SUCCESS"/>
      </depends>
    </process>

    <process name="fastMonLogger">
      <variables>
        <var name="fileType">fastMonHistAlarm</var>
      </variables>
      <job executable="${L1ProcROOT}/alarmLogger.py" batchOptions=" -q express "/>
      <depends>
        <after process="fastMonAlarm" status="SUCCESS"/>
      </depends>
    </process>

    <process name="registerFastMonAlarm">
      <variables>
        <var name="parentProcess">fastMonAlarm</var>
        <var name="dataType">fastMonAlarm</var>
      </variables>
      <script><![CDATA[
%(registerBody)s
]]>
      </script>
      <depends>
        <after process="fastMonAlarm" status="SUCCESS"/>
      </depends>
    </process>

    <process name="mergeFastMonError">
      <variables>
        <var name="fileType">fastMonError</var>
      </variables>
      <job executable="${L1ProcROOT}/mergeStuff.py" batchOptions=" -q short "/>
      <depends>
        <after process="doChunk.fastMon" status="DONE"/>
      </depends>
    </process>

    <process name="registerFastMonError">
      <variables>
        <var name="parentProcess">mergeFastMonError</var>
        <var name="dataType">FASTMONERROR</var>
      </variables>
      <script><![CDATA[
%(registerBody)s
]]>
      </script>
      <depends>
        <after process="mergeFastMonError" status="SUCCESS"/>
      </depends>
    </process>
 
    <process name="mergeGcrChunks">
      <variables>
        <var name="fileType">gcr</var>
      </variables>
      <job executable="${L1ProcROOT}/mergeStuff.py" batchOptions=" -q long "/>
      <depends>
        <after process="doChunk.mergeGcrCrumbs" status="DONE"/>
      </depends>
    </process>

    <process name="registerGcr">
      <variables>
        <var name="parentProcess">mergeGcrChunks</var>
        <var name="dataType">GCR</var>
      </variables>
      <script><![CDATA[
%(registerBody)s
]]>
      </script>
      <depends>
        <after process="mergeGcrChunks" status="SUCCESS"/>
      </depends>
    </process>

    <process name="mergeMeritChunks">
      <variables>
        <var name="fileType">merit</var>
      </variables>
      <job executable="${L1ProcROOT}/mergeStuff.py" batchOptions=" -q medium -sp 100 "/>
      <depends>
        <after process="doChunk.mergeMeritCrumbs" status="DONE"/>
      </depends>
    </process>

    <process name="registerMerit">
      <variables>
        <var name="parentProcess">mergeMeritChunks</var>
        <var name="dataType">MERIT</var>
      </variables>
      <script><![CDATA[
%(registerBody)s
]]>
      </script>
      <depends>
        <after process="mergeMeritChunks" status="SUCCESS"/>
      </depends>
    </process>
 
    <process name="makeFT1">
      <job executable="${L1ProcROOT}/makeFT1.py" batchOptions=" -q medium -sp 100 "/>
      <depends>
        <after process="mergeMeritChunks" status="SUCCESS"/>
      </depends>
    </process>

    <process name="exportFT1">
      <variables>
        <var name="fileType">ft1</var>
      </variables>
      <job executable="${L1ProcROOT}/exportStuff.py" batchOptions=" -q express -sp 100 "/>
      <depends>
        <after process="makeFT1" status="SUCCESS"/>
      </depends>
    </process>

    <process name="registerFT1">
      <variables>
        <var name="parentProcess">makeFT1</var>
        <var name="dataType">FT1</var>
      </variables>
      <script><![CDATA[
%(registerBody)s
]]>
      </script>
      <depends>
        <after process="makeFT1" status="SUCCESS"/>
      </depends>
    </process>

    <process name="ft2Runs">
      <job executable="${L1ProcROOT}/ft2Entries.py" batchOptions=" -q long -sp 100 "/>
      <depends>
        <after process="mergeDigi" status="SUCCESS"/>
        <after process="mergeMeritChunks" status="SUCCESS"/>
      </depends>
    </process>

    <process name="ingestFT2">
      <job executable="${L1ProcROOT}/ft2Db.py" batchOptions=" -q express -sp 100 "/>
      <depends>
        <after process="ft2Runs" status="SUCCESS"/>
      </depends>
    </process>

    <process name="makeFT2">
      <job executable="${L1ProcROOT}/makeFT2File.py" batchOptions=" -q short -sp 100 "/>
      <depends>
        <after process="ingestFT2" status="SUCCESS"/>
      </depends>
    </process>

    <process name="exportFT2">
      <variables>
        <var name="fileType">ft2</var>
      </variables>
      <job executable="${L1ProcROOT}/exportStuff.py" batchOptions=" -q express -sp 100 "/>
      <depends>
        <after process="makeFT2" status="SUCCESS"/>
      </depends>
    </process>

    <process name="registerFT2">
      <variables>
        <var name="parentProcess">makeFT2</var>
        <var name="dataType">FT2</var>
      </variables>
      <script><![CDATA[
%(registerBody)s
]]>
      </script>
      <depends>
        <after process="makeFT2" status="SUCCESS"/>
      </depends>
    </process>

    <process name="mergeCalChunks">
      <variables>
        <var name="fileType">cal</var>
      </variables>
      <job executable="${L1ProcROOT}/mergeStuff.py" batchOptions=" -q long "/>
      <depends>
        <after process="doChunk.mergeCalCrumbs" status="DONE"/>
      </depends>
    </process>

    <process name="registerCal">
      <variables>
        <var name="parentProcess">mergeCalChunks</var>
        <var name="dataType">CAL</var>
      </variables>
      <script><![CDATA[
%(registerBody)s
]]>
      </script>
      <depends>
        <after process="mergeCalChunks" status="SUCCESS"/>
      </depends>
    </process>

    <process name="mergeReconTrend">
      <variables>
        <var name="fileType">reconTrend</var>
      </variables>
      <job executable="${L1ProcROOT}/mergeStuff.py" batchOptions=" -q long "/>
      <depends>
        <after process="doChunk.reconTrend" status="DONE"/>
      </depends>
    </process>
 
    <process name="registerReconTrend">
      <variables>
        <var name="parentProcess">mergeReconTrend</var>
        <var name="dataType">RECONTREND</var>
      </variables>
      <script><![CDATA[
%(registerBody)s
]]>
      </script>
      <depends>
        <after process="mergeReconTrend" status="SUCCESS"/>
      </depends>
    </process>

    <process name="ingestReconTrend">
      <variables>
        <var name="reportType">reconTrend</var>
      </variables>
      <job executable="${L1ProcROOT}/ingestTrending.py" batchOptions=" -q long "/>
      <depends>
        <after process="mergeReconTrend" status="SUCCESS"/>
      </depends>
    </process>
 
    <process name="mergeReconEor">
      <variables>
        <var name="fileType">reconEor</var>
      </variables>
      <job executable="${L1ProcROOT}/mergeStuff.py" batchOptions=" -q long "/>
      <depends>
        <after process="doChunk.reconEor" status="DONE"/>
      </depends>
    </process>
 
    <process name="registerReconEor">
      <variables>
        <var name="parentProcess">mergeReconEor</var>
        <var name="dataType">RECONHIST</var>
      </variables>
      <script><![CDATA[
%(registerBody)s
]]>
      </script>
      <depends>
        <after process="mergeReconEor" status="SUCCESS"/>
      </depends>
    </process>

    <process name="mergeReconChunks">
      <variables>
        <var name="fileType">recon</var>
      </variables>
      <job executable="${L1ProcROOT}/mergeStuff.py" batchOptions=" -q long %(reconMergeScratch)s "/>
      <depends>
        <after process="doChunk.mergeReconCrumbs" status="DONE"/>
      </depends>
    </process>

    <process name="registerRecon">
      <variables>
        <var name="parentProcess">mergeReconChunks</var>
        <var name="dataType">RECON</var>
      </variables>
      <script><![CDATA[
%(registerBody)s
]]>
      </script>
      <depends>
        <after process="mergeReconChunks" status="SUCCESS"/>
      </depends>
    </process>

    <process name="mergeSvacTuple">
      <variables>
        <var name="fileType">svac</var>
      </variables>
      <job executable="${L1ProcROOT}/mergeStuff.py" batchOptions=" -q long "/>
      <depends>
        <after process="doChunk.svacTuple" status="DONE"/>
      </depends>
    </process>

    <process name="registerSvacTuple">
      <variables>
        <var name="parentProcess">mergeSvacTuple</var>
        <var name="dataType">SVAC</var>
      </variables>
      <script><![CDATA[
%(registerBody)s
]]>
      </script>
      <depends>
        <after process="mergeSvacTuple" status="SUCCESS"/>
      </depends>
    </process>

    <process name="checkRun">
      <job executable="${L1ProcROOT}/checkRun.py" batchOptions=" -q express "/>
      <depends>
        <after process="doChunk.checkChunk" status="SUCCESS"/>
        <after process="exportFT1" status="SUCCESS"/>
        <after process="exportFT2" status="SUCCESS"/>
        <after process="fastMonLogger" status="SUCCESS"/>
        <after process="ingestDigiTrend" status="SUCCESS"/>
        <after process="ingestReconTrend" status="SUCCESS"/>
        <after process="registerCal" status="SUCCESS"/>
        <after process="registerDigi" status="SUCCESS"/>
        <after process="registerDigiEor" status="SUCCESS"/>
        <after process="registerDigiTrend" status="SUCCESS"/>
        <after process="registerFT1" status="SUCCESS"/>
        <after process="registerFT2" status="SUCCESS"/>
        <after process="registerFastMonAlarm" status="SUCCESS"/>
        <after process="registerFastMonError" status="SUCCESS"/>
        <after process="registerFastMonHist" status="SUCCESS"/>
        <after process="registerFastMonTuple" status="SUCCESS"/>
        <after process="registerGcr" status="SUCCESS"/>
        <after process="registerMerit" status="SUCCESS"/>
        <after process="registerRecon" status="SUCCESS"/>
        <after process="registerReconEor" status="SUCCESS"/>
        <after process="registerReconTrend" status="SUCCESS"/>
        <after process="registerSvacTuple" status="SUCCESS"/>
      </depends>
      <createsSubtasks>
        <subtask>cleanupCompleteRun</subtask>
      </createsSubtasks>
    </process>

    <task name="cleanupCompleteRun" version="%(L1Version)s" type="Data">

      <process name="cleanupChunks">
        <job executable="${L1ProcROOT}/deleteDirs.py" batchOptions=" -q medium "/>
      </process>

      <process name="updateRunStatus">
        <script>
          <![CDATA[
%(retireScriptBody)s
]]>
        </script>
      </process>

    </task>

    <task name="doChunk" version="%(L1Version)s" type="Data">

      <prerequisites>
         <prerequisite name="CHUNK_ID" type="string"/>
         <prerequisite name="EVTFILE" type="string"/>
      </prerequisites>

      <process name="digitization">
        <job executable="${L1ProcROOT}/digitize.py" batchOptions=" -q medium -sp 100 "/>
      </process>
 
      <process name="fakeFT2">
        <job executable="${L1ProcROOT}/fakeFT2.py" batchOptions=" -q medium -sp 100 "/>
      </process>
 
      <process name="fastMon">
        <variables>
          <var name="reportType">fastMon</var>
        </variables>
        <job executable="${L1ProcROOT}/fastMon.py" batchOptions=" -q long "/>
      </process>
 
      <process name="digiEor">
        <variables>
          <var name="reportType">digiEor</var>
        </variables>
        <job executable="${L1ProcROOT}/runStrip.py" batchOptions=" -q long "/>
        <depends>
          <after process="digitization" status="SUCCESS"/>
        </depends>
      </process>
 
      <process name="digiTrend">
        <variables>
          <var name="reportType">digiTrend</var>
        </variables>
        <job executable="${L1ProcROOT}/runStrip.py" batchOptions=" -q long "/>
        <depends>
          <after process="digitization" status="SUCCESS"/>
        </depends>
      </process>
 
      <process name="setupCrumbs">
        <job executable="${L1ProcROOT}/setupCrumbs.py" batchOptions=" -q short -sp 100 "/>
        <depends>
          <after process="digitization" status="SUCCESS"/>
          <after process="fakeFT2" status="SUCCESS"/>
        </depends>
        <createsSubtasks>
          <subtask>doCrumb</subtask>
        </createsSubtasks>
      </process>

      <process name="mergeGcrCrumbs">
        <variables>
          <var name="fileType">gcr</var>
        </variables>
        <job executable="${L1ProcROOT}/mergeStuff.py" batchOptions=" -q medium -sp 100 "/>
        <depends>
          <after process="doCrumb.recon" status="DONE"/>
        </depends>
      </process>

      <process name="mergeMeritCrumbs">
        <variables>
          <var name="fileType">merit</var>
        </variables>
        <job executable="${L1ProcROOT}/mergeStuff.py" batchOptions=" -q medium -sp 100 "/>
        <depends>
          <after process="doCrumb.recon" status="DONE"/>
        </depends>
      </process>

      <process name="mergeCalCrumbs">
        <variables>
          <var name="fileType">cal</var>
        </variables>
        <job executable="${L1ProcROOT}/mergeStuff.py" batchOptions=" -q long "/>
        <depends>
          <after process="doCrumb.recon" status="DONE"/>
        </depends>
      </process>

      <process name="mergeReconCrumbs">
        <variables>
          <var name="fileType">recon</var>
        </variables>
        <job executable="${L1ProcROOT}/mergeStuff.py" batchOptions=" -q long "/>
        <depends>
          <after process="doCrumb.recon" status="DONE"/>
        </depends>
      </process>

      <process name="reconEor">
        <variables>
          <var name="reportType">reconEor</var>
        </variables>
        <job executable="${L1ProcROOT}/runStrip.py" batchOptions=" -q long "/>
        <depends>
          <after process="doCrumb.recon" status="SUCCESS"/>
          <after process="mergeCalCrumbs" status="SUCCESS"/>
          <after process="mergeReconCrumbs" status="SUCCESS"/>
        </depends>
      </process>
 
      <process name="reconTrend">
        <variables>
          <var name="reportType">reconTrend</var>
        </variables>
        <job executable="${L1ProcROOT}/runStrip.py" batchOptions=" -q long "/>
        <depends>
          <after process="doCrumb.recon" status="SUCCESS"/>
          <after process="mergeCalCrumbs" status="SUCCESS"/>
          <after process="mergeReconCrumbs" status="SUCCESS"/>
        </depends>
      </process>
 
      <process name="svacTuple">
        <job executable="${L1ProcROOT}/makeSvac.py" batchOptions=" -q long %(reconCrumbCpuf)s "/>
        <depends>
          <after process="doCrumb.recon" status="SUCCESS"/>
          <after process="mergeReconCrumbs" status="SUCCESS"/>
        </depends>
      </process>

      <process name="cleanupCrumbs">
        <job executable="${L1ProcROOT}/deleteDirs.py" batchOptions=" -q short "/>
        <depends>
          <after process="doCrumb.recon" status="SUCCESS"/>
          <after process="mergeReconCrumbs" status="SUCCESS"/>
          <after process="mergeCalCrumbs" status="SUCCESS"/>
          <after process="mergeMeritCrumbs" status="SUCCESS"/>
          <after process="mergeGcrCrumbs" status="SUCCESS"/>
        </depends>
      </process>

      <process name="checkChunk">
        <job executable="${L1ProcROOT}/checkChunk.py" batchOptions=" -q express "/>
        <depends>
          <after process="fastMon" status="SUCCESS"/>
          <after process="cleanupCrumbs" status="SUCCESS"/>
          <after process="digiEor" status="SUCCESS"/>
          <after process="digiTrend" status="SUCCESS"/>
          <after process="reconEor" status="SUCCESS"/>
          <after process="reconTrend" status="SUCCESS"/>
          <after process="svacTuple" status="SUCCESS"/>
        </depends>
      </process>

      <task name="doCrumb" version="%(L1Version)s" type="Data">

        <prerequisites>
          <prerequisite name="CRUMB_ID" type="string"/>
          <prerequisite name="crumbEvents" type="string"/>
          <prerequisite name="crumbStart" type="string"/>
        </prerequisites>

        <process name="recon">
          <job executable="${L1ProcROOT}/recon.py" batchOptions=" -q long -sp 100 %(reconCrumbCpuf)s "/>
        </process>

      </task>
     
    </task>

  </task>

  <task name="doLci" version="%(L1Version)s" type="Data">

    <prerequisites>
      <prerequisite name="DOWNLINK_ID" type="string"/>
      <prerequisite name="RUNID" type="string"/>
      <prerequisite name="RUNSTATUS" type="string"/>
      <prerequisite name="RUN_RAWDIR" type="string"/>
    </prerequisites>

    <process name="findChunksLci">
      <job executable="${L1ProcROOT}/findChunks.py" batchOptions=" -q express -E ${L1ProcROOT}/lockFile.py "/>
      <createsSubtasks>
        <subtask>doChunkLci</subtask>
      </createsSubtasks>
    </process>

    <process name="mergeDigiLci">
      <variables>
        <var name="fileType">digi</var>
      </variables>
      <job executable="${L1ProcROOT}/mergeStuff.py" batchOptions=" -q medium "/>
      <depends>
        <after process="doChunkLci.digitizationLci" status="DONE"/>
      </depends>
    </process>

    <process name="registerDigiLci">
      <variables>
        <var name="parentProcess">mergeDigiLci</var>
        <var name="dataType">DIGI</var>
      </variables>
      <script><![CDATA[
%(registerBody)s
]]>
      </script>
      <depends>
        <after process="mergeDigiLci" status="SUCCESS"/>
      </depends>
    </process>
 
     <process name="mergeDigiEorLci">
      <variables>
        <var name="fileType">digiEor</var>
      </variables>
      <job executable="${L1ProcROOT}/mergeStuff.py" batchOptions=" -q long "/>
      <depends>
        <after process="doChunkLci.digiEorLci" status="DONE"/>
      </depends>
    </process>
 
    <process name="registerDigiEorLci">
      <variables>
        <var name="parentProcess">mergeDigiEorLci</var>
        <var name="dataType">DIGIHIST</var>
      </variables>
      <script><![CDATA[
%(registerBody)s
]]>
      </script>
      <depends>
        <after process="mergeDigiEorLci" status="SUCCESS"/>
      </depends>
    </process>

    <process name="mergeFastMonErrorLci">
      <variables>
        <var name="fileType">fastMonError</var>
      </variables>
      <job executable="${L1ProcROOT}/mergeStuff.py" batchOptions=" -q short "/>
      <depends>
        <after process="doChunkLci.fastMonLci" status="DONE"/>
      </depends>
    </process>

    <process name="registerFastMonErrorLci">
      <variables>
        <var name="parentProcess">mergeFastMonErrorLci</var>
        <var name="dataType">FASTMONERROR</var>
      </variables>
      <script><![CDATA[
%(registerBody)s
]]>
      </script>
      <depends>
        <after process="mergeFastMonErrorLci" status="SUCCESS"/>
      </depends>
    </process>

    <process name="mergeFastMonHistLci">
      <variables>
        <var name="fileType">fastMonHist</var>
      </variables>
      <job executable="${L1ProcROOT}/mergeStuff.py" batchOptions=" -q long "/>
      <depends>
        <after process="doChunkLci.fastMonLci" status="DONE"/>
      </depends>
    </process>

    <process name="registerFastMonHistLci">
      <variables>
        <var name="parentProcess">mergeFastMonHistLci</var>
        <var name="dataType">FASTMONHIST</var>
      </variables>
      <script><![CDATA[
%(registerBody)s
]]>
      </script>
      <depends>
        <after process="mergeFastMonHistLci" status="SUCCESS"/>
      </depends>
    </process>
 
    <process name="mergeFastMonTupleLci">
      <variables>
        <var name="fileType">fastMonTuple</var>
      </variables>
      <job executable="${L1ProcROOT}/mergeStuff.py" batchOptions=" -q long "/>
      <depends>
        <after process="doChunkLci.fastMonLci" status="DONE"/>
      </depends>
    </process>

    <process name="registerFastMonTupleLci">
      <variables>
        <var name="parentProcess">mergeFastMonTupleLci</var>
        <var name="dataType">FASTMONTUPLE</var>
      </variables>
      <script><![CDATA[
%(registerBody)s
]]>
      </script>
      <depends>
        <after process="mergeFastMonTupleLci" status="SUCCESS"/>
      </depends>
    </process>
 
    <process name="checkRunLci">
      <job executable="${L1ProcROOT}/checkRun.py" batchOptions=" -q express "/>
      <depends>
        <after process="doChunkLci.checkChunkLci" status="SUCCESS"/>
        <after process="registerDigiLci" status="SUCCESS"/>
        <after process="registerFastMonErrorLci" status="SUCCESS"/>
        <after process="registerFastMonHistLci" status="SUCCESS"/>
        <after process="registerFastMonTupleLci" status="SUCCESS"/>
        <after process="registerDigiEorLci" status="SUCCESS"/>
      </depends>
      <createsSubtasks>
        <subtask>cleanupCompleteRunLci</subtask>
      </createsSubtasks>
    </process>

    <task name="cleanupCompleteRunLci" version="%(L1Version)s" type="Data">

      <process name="cleanupChunksLci">
        <job executable="${L1ProcROOT}/deleteDirs.py" batchOptions=" -q medium "/>
      </process>

      <process name="updateRunStatusLci">
        <script>
          <![CDATA[
%(retireScriptBody)s
]]>
        </script>
      </process>

    </task>

    <task name="doChunkLci" version="%(L1Version)s" type="Data">

      <prerequisites>
         <prerequisite name="CHUNK_ID" type="string"/>
         <prerequisite name="EVTFILE" type="string"/>
      </prerequisites>

      <process name="digitizationLci">
        <job executable="${L1ProcROOT}/digitize.py" batchOptions=" -q long "/>
      </process>
 
      <process name="fastMonLci">
        <variables>
          <var name="reportType">fastMon</var>
        </variables>
        <job executable="${L1ProcROOT}/fastMon.py" batchOptions=" -q long "/>
      </process>
 
      <process name="digiEorLci">
        <variables>
          <var name="reportType">digiEor</var>
        </variables>
        <job executable="${L1ProcROOT}/runStrip.py" batchOptions=" -q long "/>
        <depends>
          <after process="digitizationLci" status="SUCCESS"/>
        </depends>
      </process>
 
      <process name="checkChunkLci">
        <job executable="${L1ProcROOT}/checkChunk.py" batchOptions=" -q express "/>
        <depends>
          <after process="fastMonLci" status="SUCCESS"/>
          <after process="digiEorLci" status="SUCCESS"/>
        </depends>
      </process>

    </task>

  </task>

  <task name="cleanupIncompleteRun" version="%(L1Version)s" type="Data">

    <prerequisites>
      <prerequisite name="RUNID" type="string"/>
      <prerequisite name="RUNSTATUS" type="string"/>
    </prerequisites>

    <process name="cleanupChunksInc">
      <job executable="${L1ProcROOT}/deleteDirs.py" batchOptions=" -q medium "/>
    </process>

    <process name="updateRunStatusInc">
      <script>
        <![CDATA[
%(retireScriptBody)s
]]>
      </script>
    </process>

  </task>

</task>
</pipeline>
