<?xml version="1.0" encoding="UTF-8"?>
<pipeline
  xmlns="http://glast-ground.slac.stanford.edu/pipeline"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://glast-ground.slac.stanford.edu/pipeline http://glast-ground.slac.stanford.edu/Pipeline-II/schemas/2.0/pipeline.xsd">

<task name="P305-FT2" version="5.8" type="Data">

  <variables>
    <var name="DATASOURCE">LPA</var>
    <var name="DOWNLINK_ID">0</var>
    <var name="DOWNLINK_RAWDIR">/nowhere/0</var>
    <var name="creator">${L1_TASK_NAME}-${L1_TASK_VERSION}</var>
    <var name="isocMode">ISOC_PROD</var>
    <var name="isocRun">/afs/slac/g/glast/isoc/flightOps/rhel6_gcc44/${isocMode}/bin/isoc run</var>
    <var name="L1ProcROOT">/afs/slac.stanford.edu/g/glast/ground/PipelineConfig/Level1/5.8</var>
    <var name="L1_TASK_NAME">P305-FT2</var>
    <var name="L1_TASK_VERSION">5.8</var>
    <var name="L1_INSTALL_DIR">/afs/slac.stanford.edu/g/glast/ground/PipelineConfig/Level1</var>
    <var name="L1_BUILD_DIR">/afs/slac/g/glast/ground/releases/volume11/L1Proc</var>
    <var name="L1TrendVersion">Prompt</var> <!-- override if reprocessing -->
    <var name="LD_LIBRARY_PATH">/afs/slac/g/glast/ground/releases/volume11/L1Proc/5.8/lib/redhat6-x86_64-64bit-gcc44-Optimized:/afs/slac.stanford.edu/g/glast/ground/GLAST_EXT/redhat6-x86_64-64bit-gcc44/ROOT/v5.34.03-gr01/lib</var>
    <var name="nameManglingPrefix">L1</var>
    <var name="dataCatDir">/Data/Flight/Reprocess/P305</var>
    <var name="baseVersion">305</var>
	<var name="theQueue">glastdataq</var>
  </variables>

  <prerequisites>
      <prerequisite name="RUNID" type="string"/>
   </prerequisites>

    <process name="lookupFiles" autoRetryMaxAttempts="1">
      <variables>
        <var name="fileTypes">digi,merit,magic7L1</var>
        <var name="dataCatMode">prod</var>
      </variables>
      <job executable="${L1ProcROOT}/tools/wrapper ${isocRun} --add-env=oracle11 --add-env=flightops python2.5 ${L1ProcROOT}/lookupJob.py" batchOptions=" -q ${theQueue} " />
    </process>


  <process name="getTimes" autoRetryMaxAttempts="1">
    <job executable="${L1ProcROOT}/tools/wrapper ${isocRun} --add-env=oracle11 python2.5 ${L1ProcROOT}/getTimesAcq.py" batchOptions=" -q ${theQueue} "/>
  </process>


    <process name="getQuality" autoRetryMaxAttempts="1">
       <script><![CDATA[
runNumber = int(RUNID[1:])
quality = runQuality.getRunQuality(runNumber)
print 'q:', quality
pipeline.setVariable('runQuality', quality)

]]> 
      </script>
    </process>

    <process name="makeGaps" autoRetryMaxAttempts="1">
      <variables>
        <var name="L1_digi_fileName">${pipeline.processInstance("lookupFiles").getVariable("L1_digi_fileName")}</var>
        <var name="L1_digiGap_ver">${datacatalog.getDatasetLatestVersion(RUNID, dataCatDir, "DIGIGAP")}</var>
     </variables>
      <job executable="${L1ProcROOT}/tools/wrapper ${isocRun} python2.5 ${L1ProcROOT}/makeGaps.py" batchOptions=" -q ${theQueue} " />
      <depends>
        <after process="lookupFiles" status="SUCCESS"/>
      </depends>
    </process>


    <process name="registerGaps" autoRetryMaxAttempts="1">
      <variables>
        <var name="parentProcess">makeGaps</var>
        <var name="fileType">digiGap</var>
        <var name="timeProcess">getTimes</var>
      </variables>
      <script><![CDATA[
"""@brief Register output data with the data server.
@author W. Focke <focke@slac.stanford.edu>
"""
# This script is automagically pasted into the XML at install time

from java.util import HashMap

def getVar(fileType, name):
    mangledName = '_'.join([nameManglingPrefix, fileType, name])
    value = parentPI.getVariable(mangledName)
    return value

currentStream = pipeline.getCurrentStream()

parentPI = currentStream.getProcessInstance(parentProcess)

runNumber = int(RUNID[1:])

dsName = RUNID
fileFormat = getVar(fileType, 'format')
dcType = getVar(fileType, 'dcType')
dcGroup = getVar(fileType, 'group')
site = getVar(fileType, 'site')
fileName = getVar(fileType, 'fileName')
version = getVar(fileType, 'ver')

fcPi = currentStream.getProcessInstance(timeProcess)
lessBrokenTStart = fcPi.getVariable('tStart')
lessBrokenTStop = fcPi.getVariable('tStop')
mootAlias = fcPi.getVariable('mootAlias')
mootKey = fcPi.getVariable('mootKey')

attributes = HashMap()
attributes.put('sCreator', creator)
attributes.put('sDataSource', DATASOURCE)
attributes.put('nDownlink', DOWNLINK_ID)
attributes.put('sIntent', mootAlias)
attributes.put('nMetStart', lessBrokenTStart)
attributes.put('nMetStop', lessBrokenTStop)
attributes.put('nMootKey', mootKey)
attributes.put('nRun', runNumber)

mdRepr = getVar(fileType, 'metadata')
if mdRepr:
    metadata = eval(mdRepr)
    for key, value in metadata.items(): attributes.put(key, value)

print attributes

dsNew = datacatalog.newDataset(dsName, fileFormat, dcType, dataCatDir, dcGroup, site, fileName)
dsNew.setVersionID(version)
ds = datacatalog.registerDataset(dsNew, attributes);

]]>
      </script>
      <depends>
        <after process="makeGaps" status="SUCCESS"/>
        <after process="getTimes" status="SUCCESS"/>
      </depends>
    </process>

    <process name="ft2Runs" autoRetryMaxAttempts="1">
      <variables>
        <var name="outFileType">ft2Seconds</var>
        <var name="L1_digi_fileName">${pipeline.processInstance("lookupFiles").getVariable("L1_digi_fileName")}</var>
        <var name="L1_digiGap_fileName">${pipeline.processInstance("makeGaps").getVariable("L1_digiGap_fileName")}</var>
        <var name="L1_ft2Seconds_ver">${datacatalog.getDatasetLatestVersion(RUNID, dataCatDir, "FT2SECONDS")}</var>
        <var name="L1_magic7L1_fileName">${pipeline.processInstance("lookupFiles").getVariable("L1_magic7L1_fileName")}</var>
        <var name="L1_merit_fileName">${pipeline.processInstance("lookupFiles").getVariable("L1_merit_fileName")}</var>
        <var name="runQuality">${pipeline.processInstance("getQuality").getVariable("runQuality")}</var>
        <var name="mootAlias">${pipeline.processInstance("lookupFiles").getVariable("mootAlias")}</var>
      </variables>
      <job executable="${L1ProcROOT}/tools/wrapper ${isocRun} --add-env=oracle11 python2.5 ${L1ProcROOT}/ft2Entries.py" batchOptions=" -q ${theQueue} -R &quot;rusage[scratch=15]&quot; " />
      <depends>
        <after process="registerGaps" status="SUCCESS"/>
        <after process="getQuality" status="SUCCESS"/>
      </depends>
    </process>

    <process name="registerFt2Seconds" autoRetryMaxAttempts="1">
      <variables>
        <var name="parentProcess">ft2Runs</var>
        <var name="fileType">ft2Seconds</var>
        <var name="timeProcess">getTimes</var>
      </variables>
      <script><![CDATA[
"""@brief Register output data with the data server.
@author W. Focke <focke@slac.stanford.edu>
"""
# This script is automagically pasted into the XML at install time

from java.util import HashMap

def getVar(fileType, name):
    mangledName = '_'.join([nameManglingPrefix, fileType, name])
    value = parentPI.getVariable(mangledName)
    return value

currentStream = pipeline.getCurrentStream()

parentPI = currentStream.getProcessInstance(parentProcess)

runNumber = int(RUNID[1:])

dsName = RUNID
fileFormat = getVar(fileType, 'format')
dcType = getVar(fileType, 'dcType')
dcGroup = getVar(fileType, 'group')
site = getVar(fileType, 'site')
fileName = getVar(fileType, 'fileName')
version = getVar(fileType, 'ver')

fcPi = currentStream.getProcessInstance(timeProcess)
lessBrokenTStart = fcPi.getVariable('tStart')
lessBrokenTStop = fcPi.getVariable('tStop')
mootAlias = fcPi.getVariable('mootAlias')
mootKey = fcPi.getVariable('mootKey')

attributes = HashMap()
attributes.put('sCreator', creator)
attributes.put('sDataSource', DATASOURCE)
attributes.put('nDownlink', DOWNLINK_ID)
attributes.put('sIntent', mootAlias)
attributes.put('nMetStart', lessBrokenTStart)
attributes.put('nMetStop', lessBrokenTStop)
attributes.put('nMootKey', mootKey)
attributes.put('nRun', runNumber)

mdRepr = getVar(fileType, 'metadata')
if mdRepr:
    metadata = eval(mdRepr)
    for key, value in metadata.items(): attributes.put(key, value)

print attributes

dsNew = datacatalog.newDataset(dsName, fileFormat, dcType, dataCatDir, dcGroup, site, fileName)
dsNew.setVersionID(version)
ds = datacatalog.registerDataset(dsNew, attributes);

]]>
      </script>
      <depends>
        <after process="ft2Runs" status="SUCCESS"/>
      </depends>
    </process>

    <process name="makeFT2" autoRetryMaxAttempts="1">
      <variables>
        <var name="inFileType">ft2Seconds</var>
        <var name="outFileType">ft2</var>
        <var name="L1_ft2Seconds_ver">${datacatalog.getDatasetLatestVersion(RUNID, dataCatDir, "FT2SECONDS")}</var>
        <var name="L1_ft2_ver">${datacatalog.getDatasetLatestVersion(RUNID, dataCatDir, "FT2")}</var>
      </variables>
      <job executable="${L1ProcROOT}/tools/wrapper ${isocRun} python2.5 ${L1ProcROOT}/makeFT2File.py" batchOptions=" -q ${theQueue} -R &quot;rusage[scratch=1]&quot; " />
      <depends>
        <after process="registerFt2Seconds" status="SUCCESS"/>
      </depends>
    </process>

    <process name="registerFT2" autoRetryMaxAttempts="1">
      <variables>
        <var name="parentProcess">makeFT2</var>
        <var name="fileType">ft2</var>
        <var name="timeProcess">getTimes</var>
      </variables>
      <script><![CDATA[
"""@brief Register output data with the data server.
@author W. Focke <focke@slac.stanford.edu>
"""
# This script is automagically pasted into the XML at install time

from java.util import HashMap

def getVar(fileType, name):
    mangledName = '_'.join([nameManglingPrefix, fileType, name])
    value = parentPI.getVariable(mangledName)
    return value

currentStream = pipeline.getCurrentStream()

parentPI = currentStream.getProcessInstance(parentProcess)

runNumber = int(RUNID[1:])

dsName = RUNID
fileFormat = getVar(fileType, 'format')
dcType = getVar(fileType, 'dcType')
dcGroup = getVar(fileType, 'group')
site = getVar(fileType, 'site')
fileName = getVar(fileType, 'fileName')
version = getVar(fileType, 'ver')

fcPi = currentStream.getProcessInstance(timeProcess)
lessBrokenTStart = fcPi.getVariable('tStart')
lessBrokenTStop = fcPi.getVariable('tStop')
mootAlias = fcPi.getVariable('mootAlias')
mootKey = fcPi.getVariable('mootKey')

attributes = HashMap()
attributes.put('sCreator', creator)
attributes.put('sDataSource', DATASOURCE)
attributes.put('nDownlink', DOWNLINK_ID)
attributes.put('sIntent', mootAlias)
attributes.put('nMetStart', lessBrokenTStart)
attributes.put('nMetStop', lessBrokenTStop)
attributes.put('nMootKey', mootKey)
attributes.put('nRun', runNumber)

mdRepr = getVar(fileType, 'metadata')
if mdRepr:
    metadata = eval(mdRepr)
    for key, value in metadata.items(): attributes.put(key, value)

print attributes

dsNew = datacatalog.newDataset(dsName, fileFormat, dcType, dataCatDir, dcGroup, site, fileName)
dsNew.setVersionID(version)
ds = datacatalog.registerDataset(dsNew, attributes);

]]>
      </script>
      <depends>
        <after process="makeFT2" status="SUCCESS"/>
      </depends>
    </process>


</task> <!-- reprocessFt2 -->
</pipeline>

